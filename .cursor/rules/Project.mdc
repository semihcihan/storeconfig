---
description: General Project description and resources/references, API specifications, functionalities.
alwaysApply: false
---

# Project: App Store Sync CLI

A Node.js CLI tool to synchronize in-app purchases and subscriptions with the App Store from a local JSON file.

## Objective

The primary objective of this project is to create a command-line tool that simplifies managing App Store Connect in-app purchases (IAPs) and subscriptions by syncing them from a local JSON file. This will allow for easier version control, automation, and management of IAPs and subscriptions as code. Each JSON file will belong to a single APP.

## Core Features

- **Authentication:** Securely authenticate with the App Store Connect API using a private key (`.p8` file), Key ID, and Issuer ID.
- **JSON Definition:** Define a clear and easy-to-use JSON schema for specifying IAPs and subscriptions.
- **Syncing:** Create, update, or delete in-app purchases and subscriptions.
- **Validation:** Validate the JSON file against a Zod schema before syncing, providing both runtime validation and static TypeScript types.
- **Dry Runs:** Allow users to perform a "dry run" to see what changes would be made without actually applying them.
- **Fetching:** Fetch the current state of IAPs and subscriptions from App Store Connect to generate a local JSON file or to compare with the local state.

## Configuration

The tool is configured using a `.env` file in the project root:

```env
# App Store Connect API Credentials
ASC_ISSUER_ID=your-issuer-id-goes-here
ASC_KEY_ID=your-key-id-goes-here
ASC_PRIVATE_KEY_PATH=/path/to/your/AuthKey_YOUR_KEY_ID.p8
```

## Pricing Model

The pricing model differs between In-App Purchases and Subscriptions due to App Store Connect API capabilities.

### In-App Purchase Pricing

For standard In-App Purchases (consumables, non-consumables), specify a concrete `price` for each territory within a `priceSchedule` object:

```json
"priceSchedule": {
  "baseTerritory": "USA",
  "prices": [
    { "price": "9.99", "territory": "USA" },
    { "price": "12.99", "territory": "CAN" }
  ]
}
```

### Subscription Pricing

Subscriptions use a simple `prices` array directly (no `priceSchedule` object):

```json
"subscriptions": [
  {
    "productId": "com.example.monthly",
    "prices": [
      { "price": "4.99", "territory": "USA" },
      { "price": "5.99", "territory": "CAN" }
    ]
  }
]
```

**Important:** When updating subscription prices, we use `preserveCurrentPrice: true` to protect existing subscribers while allowing new subscribers to get updated prices.

## API Limitations

### App Availability Limitations

- **Cannot update after creation:** Once an app availability is created, the `availableInNewTerritories` field cannot be modified via the API.
- **No DELETE endpoint:** There is no documented DELETE endpoint for `/v2/appAvailabilities/{id}`.
- **No PATCH/PUT endpoint:** There is no documented PATCH or PUT endpoint for updating app availability.
- **One-to-one relationship:** Each app can only have one app availability object.

## CLI Commands

- `app-store-sync new`: Creates a sample JSON file (placeholder implementation).
- `app-store-sync validate --file <path>`: Validates the JSON file against the schema.
- `app-store-sync fetch --id <app-id> --file <path>`: Fetches the current IAPs and subscriptions from App Store Connect and writes them to the specified JSON file.
- `app-store-sync plan --file <path> [--id <app-id> | --current-state-file <path>]`: Shows a plan of changes (dry run).
- `app-store-sync apply --file <path> [--id <app-id> | --current-state-file <path>]`: Applies the changes to App Store Connect.

## Project Structure

```
/
├── .env
├── package.json
├── example.json
├── territories.json
├── durations.json
├── openapi.json
├── src/
│   ├── cli.ts
│   ├── commands/
│   │   ├── new.ts
│   │   ├── validate.ts
│   │   ├── fetch.ts
│   │   ├── plan.ts
│   │   └── apply.ts
│   ├── services/
│   │   ├── auth.ts
│   │   ├── api.ts
│   │   ├── diff-service.ts
│   │   ├── apply-service.ts
│   │   ├── plan-service.ts
│   │   ├── app-store-aggregator.ts
│   │   ├── pricing-aggregator.ts
│   │   ├── retry-middleware.ts
│   │   └── apply/
│   │       ├── app-availability-service.ts
│   │       ├── app-pricing-service.ts
│   │       ├── iap-availability-service.ts
│   │       ├── iap-pricing-service.ts
│   │       ├── in-app-purchase-service.ts
│   │       ├── subscription-availability-service.ts
│   │       ├── subscription-pricing-service.ts
│   │       ├── subscription-service.ts
│   │       └── introductory-offer-service.ts
│   ├── domains/
│   │   ├── app-store/
│   │   ├── availability/
│   │   ├── in-app-purchases/
│   │   ├── pricing/
│   │   └── subscriptions/
│   ├── models/
│   │   ├── app-store.ts
│   │   ├── diff-plan.ts
│   │   ├── locales.ts
│   │   └── territories.ts
│   ├── helpers/
│   │   ├── constants.ts
│   │   ├── error-handling-helpers.ts
│   │   ├── id-encoding-helpers.ts
│   │   ├── pagination-helpers.ts
│   │   ├── relationship-helpers.ts
│   │   ├── validation-helpers.ts
│   │   ├── subscription-validation.ts
│   │   ├── introductory-offer-validation.ts
│   │   └── duration-validation.ts
│   ├── utils/
│   │   └── logger.ts
│   └── generated/
│       └── app-store-connect-api/
│           └── index.ts
├── scripts/
├── openapi/
│   ├── components/
│   ├── paths/
│   └── openapi.json
└── README.md
```

## Development Guidelines

### API Architecture

- **All API related functions should go under related domain's api-client.ts**
- **No API calls inside `services/`** - these should only orchestrate the operations
- **Use the generated API client** from `src/generated/app-store-connect-api/index.ts` for type-safe API calls
- **For OpenAPI schema lookups**, use the `openapi/` directory and `openapi/openapi.json` file

### Data Models

- **Our JSON format** is defined in `src/models/app-store.ts` using Zod schemas
- **We convert between our format and Apple's OpenAPI models** in the domain mappers
- **Refer to `example.json`** for sample structure of IAPs and subscriptions

## Command Workflow

- **new:** Bootstraps a new JSON file with sample IAPs/subscriptions (placeholder).
- **validate:** Checks the local JSON file for schema and data validity.
- **fetch:** Retrieves the current state from App Store Connect and writes it to a local JSON file.
- **plan:** Compares the local JSON file with the current state and shows a summary of what would change.
- **apply:** Applies the necessary changes to App Store Connect to make its state match the local JSON file.

## Development Status

1. **Setup Project:** ✅ Initialize a Node.js project, install dependencies, and set up the basic project structure.
2. **Authentication:** ✅ Implement the JWT generation for App Store Connect API authentication.
3. **CLI Scaffolding:** ✅ Set up the basic CLI commands using `yargs`.
4. **API Service:** ✅ Create a service to interact with the App Store Connect API using `openapi-fetch`.
5. **IAP/Subscription Models:** ✅ Refine the JSON schema and implement the logic for creating/updating IAPs and subscriptions.
6. **Implement Commands:** ✅ Build out the full functionality for the `new`, `fetch`, `validate`, `plan`, and `apply` commands.
7. **Documentation:** Write a comprehensive `README.md` with usage instructions.

## References

### Apple Developer Documentation

- **Managing In-App Purchases:** [Managing In-App Purchases](https://developer.apple.com/documentation/appstoreconnectapi/managing-in-app-purchases)
- **Managing Auto-Renewable Subscriptions:** [Managing Auto-Renewable Subscriptions](https://developer.apple.com/documentation/appstoreconnectapi/managing-auto-renewable-subscriptions)
- **Creating Auto-Renewable Subscription Groups:** [Creating Auto-Renewable Subscription Groups](https://developer.apple.com/documentation/appstoreconnectapi/creating-auto-renewable-subscription-groups)
- **API Keys and Tokens:**
  - [Creating API Keys for App Store Connect API](https://developer.apple.com/documentation/appstoreconnectapi/creating-api-keys-for-app-store-connect-api)
  - [Generating Tokens for API Requests](https://developer.apple.com/documentation/appstoreconnectapi/generating-tokens-for-api-requests)

### Project Files

- **Example JSON:** `example.json` - Sample structure of the IAPs and subscriptions file
- **Generated API Client:** `src/generated/app-store-connect-api/index.ts` - Auto-generated from Apple's OpenAPI specifications
- **OpenAPI Schema:** `openapi/` directory and `openapi/openapi.json` - Use these for schema lookups
- **Data Models:** `src/models/app-store.ts` - Our JSON format definitions using Zod schemas
